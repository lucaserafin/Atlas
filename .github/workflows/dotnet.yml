# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
          java-version: 17
          distribution: 'zulu' 

    - name: Cache SonarQube Cloud packages
      uses: actions/cache@v4
      with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarQube Cloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
          path: /sonar/scanner 
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarQube Cloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: bash
      run: |
          mkdir /sonar/scanner 
          dotnet tool update dotnet-sonarscanner --tool-path /sonar/scanner

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: shell
      run: |
        /sonar/scanner&dotnet-sonarscanner begin /k:"lucaserafin_Atlas" /o:"lucaserafin" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build
        dotnet test --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
        /sonar/scanner&dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
    # - name: Build
    #   run: dotnet build --no-restore
    
    # - name: Test
    #   run: dotnet test --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: coverage.opencover.xml
        token: ${{ secrets.CODECOV_TOKEN }}

    # - name: SonarCloud Scan
    #   uses: sonarsource/sonarcloud-github-action@v3.1.0
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}